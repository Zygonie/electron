{
  "name": "broccoli-babel-transpiler",
  "version": "5.6.1",
  "description": "A Broccoli plugin which transpile ES6 to readable ES5 by using babel.",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "mocha test.js",
    "test:debug": "mocha debug test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/broccoli-babel-transpiler.git"
  },
  "keywords": [
    "broccoli-plugin",
    "transpiler",
    "es6",
    "ecmascript",
    "ecmascript6",
    "harmony",
    "javascript",
    "js"
  ],
  "author": {
    "name": "nightire",
    "email": "nightire@very-geek.com",
    "url": "http://very-geek.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/babel/broccoli-babel-transpiler/issues"
  },
  "homepage": "https://github.com/babel/broccoli-babel-transpiler",
  "dependencies": {
    "babel-core": "^5.0.0",
    "broccoli-persistent-filter": "^1.0.1",
    "broccoli-funnel": "^1.0.0",
    "broccoli-merge-trees": "^1.0.0",
    "clone": "^0.2.0",
    "hash-for-dep": "^1.0.2",
    "json-stable-stringify": "^1.0.0"
  },
  "devDependencies": {
    "broccoli": "^0.16.3",
    "broccoli-test-helpers": "0.0.8",
    "chai": "^3.5.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.4.5",
    "rimraf": "^2.4.2"
  },
  "readme": "# broccoli-babel-transpiler\n\n[![Build Status](https://travis-ci.org/babel/broccoli-babel-transpiler.svg?branch=master)](https://travis-ci.org/babel/broccoli-babel-transpiler)\n[![Build status](https://ci.appveyor.com/api/projects/status/a0nbd84m1x4y5fp5?svg=true)](https://ci.appveyor.com/project/embercli/broccoli-babel-transpiler)\n\n\nA [Broccoli](https://github.com/broccolijs/broccoli) plugin which\ntranspiles ES6 to readable ES5 by using [babel](https://github.com/babel/babel).\n\n## How to install?\n\n```sh\n$ npm install broccoli-babel-transpiler --save-dev\n```\n\n## How to use?\n\nIn your `Brocfile.js`:\n\n```js\nvar esTranspiler = require('broccoli-babel-transpiler');\nvar scriptTree = esTranspiler(inputTree, options);\n```\n\nYou can find [options](https://babeljs.io/docs/usage/options) at babel's\ngithub repo.\n\n### Examples\n\nYou'll find three example projects using this plugin in the repository [broccoli-babel-examples](https://github.com/givanse/broccoli-babel-examples).\nEach one of them builds on top of the previous example so you can progess from bare minimum to ambitious development.\n\n * [es6-fruits](https://github.com/givanse/broccoli-babel-examples/tree/master/es6-fruits) - Execute a single ES6 script.\n * [es6-website](https://github.com/givanse/broccoli-babel-examples/tree/master/es6-website) - Build a simple website.\n * [es6-modules](https://github.com/givanse/broccoli-babel-examples/tree/master/es6-modules) - Handle modules and unit tests.\n\n## About source map\n\nCurrently this plugin only supports inline source map. If you need\nseparate source map feature, you're welcome to submit a pull request.\n\n## Advanced usage\n\n`filterExtensions` is an option to limit (or expand) the set of file extensions that will be transformed.\n\nThe default `filterExtension` is `js`\n\n```js\nvar esTranspiler = require('broccoli-babel-transpiler');\nvar scriptTree = esTranspiler(inputTree, {\n    filterExtensions:['js', 'es6'] // babelize both .js and .es6 files\n});\n```\n\n`exportModuleMetadata` is an option that can be used to write a JSON file to the output tree that gives you metadata about the tree's imports and exports.\n\n## Polyfill\n\nIn order to use some of the ES6 features you must include the Babel [polyfill](http://babeljs.io/docs/usage/polyfill/#usage-in-browser).\n\nYou don't always need this, review which features need the polyfill here: [ES6 Features](https://babeljs.io/docs/learn-es6).\n\n```js\nvar esTranspiler = require('broccoli-babel-transpiler');\nvar scriptTree = esTranspiler(inputTree, { browserPolyfill: true });\n```\n\n## Plugins\n\nUse of custom plugins works similarly to `babel` itself. You would pass a `plugins` array in `options`:\n\n```js\nvar esTranspiler = require('broccoli-babel-transpiler');\nvar applyFeatureFlags = require('babel-plugin-feature-flags');\n\nvar featureFlagPlugin = applyFeatureFlags({\n  import: { module: 'ember-metal/features' },\n  features: {\n    'ember-metal-blah': true\n  }\n});\n\nvar scriptTree = esTranspiler(inputTree, {\n  plugins: [\n    featureFlagPlugin\n  ]\n});\n```\n\n### Caching\n\nbroccoli-babel-transpiler uses a persistent cache to enable rebuilds to be significantly faster (by avoiding transpilation for files that have not changed).\nHowever, since a plugin can do many things to affect the transpiled output it must also influence the cache key to ensure transpiled files are rebuilt\nif the plugin changes (or the plugins configuration).\n\nIn order to aid plugin developers in this process, broccoli-babel-transpiler will invoke two methods on a plugin so that it can augment the cache key:\n\n* `cacheKey` - This method is used to describe any runtime information that may want to invalidate the cached result of each file transpilation. This is\n  generally only needed when the configuration provided to the plugin is used to modify the AST output by a plugin like `babel-plugin-filter-imports` (module\n  exports to strip from a build), `babel-plugin-feature-flags` (configured features and current status to strip or embed in a final build), or\n  `babel-plugin-htmlbars-inline-precompile` (uses `ember-template-compiler.js` to compile inlined templates).\n* `baseDir` - This method is expected to return the plugins base dir. The provided `baseDir` is used to ensure the cache is invalidated if any of the\n  plugin's files change (including its deps). Each plugin should implement `baseDir` as: `Plugin.prototype.baseDir = function() { return \\_\\_dirname; };`.\n",
  "readmeFilename": "README.md",
  "_id": "broccoli-babel-transpiler@5.6.1",
  "_from": "broccoli-babel-transpiler@^5.6.0"
}
